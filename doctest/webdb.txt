
=====
DB.connect
=====

>>> from webdb import *
>>> db = DB.connect('sqlite', 'path/to/database.sqlite')
Traceback (most recent call last):
 ...
IOError: [Errno 2] No such file or directory: 'path/to/database.sqlite'
>>> db = DB.connect('fakename')
Traceback (most recent call last):
 ...
UnknownDriver: Unable to find database driver 'fakename'
>>> db = DB.connect('<>invalid name+/%')
Traceback (most recent call last):
 ...
UnknownDriver: Unable to find database driver '<>invalid name+/%'
>>> db = DB.connect('base') #Module exists, but has no object named 'base'
Traceback (most recent call last):
 ...
UnknownDriver: Unable to find database driver 'base'
>>> db = DB.connect('sqlite')

=====
Table
=====

>>> db.table1 = Table()
Traceback (most recent call last):
 ...
TypeError: Tables must have at least one column
>>> db.table1 = Table(StrColumn('bad identifier'))
Traceback (most recent call last):
 ...
NameError: Column names can only contain letters, numbers, and underscores. Got 'bad identifier'
>>> db.table1 = db.table2 = Table(StrColumn('data'))
>>> db.table1 is db.table2
False
>>> db.table1 == db.table2
True
>>> db.table1._name
'table1'
>>> db.table2._name
'table2'
>>> db.table1.data is db.table2.data
False
>>> db.table1 == Table(StrColumn('data'))
True
>>> db.table1 == [StrColumn('data')]
True
>>> db.table1 == Table(IntColumn('data'))
False
>>> db.table3 = Table(StrColumn('columns'))
>>> db.users = Table(
... 	StrColumn('first_name'),
... 	StrColumn('last_name'),
... 	StrColumn('email'),
... 	IntColumn('age', default=18),
... 	DateTimeColumn('registered', default=datetime.datetime.now),
... )
>>> db.messages = Table(
... 	ReferenceColumn('owner', db.users),
... 	StrColumn('subject'),
... 	StrColumn('content'),
... 	DateTimeColumn('sent', default=datetime.datetime.now),
... )

-----
Table.insert
-----

>>> db.table1.insert(data='12345')
1
>>> db.table1.insert(nonexistant=True)
Traceback (most recent call last):
 ...
KeyError: 'No such column in table: nonexistant'
>>> db.table1.insert(data=23456)
2
>>> for row in db.table1.select():
...   print sorted(row.items())
[('data', '12345')]
[('data', '23456')]
>>> for row in db.table2.select():
...   print row
>>> db.table3.insert(columns='1')
1
>>> (db.table3.columns['columns'] == '1').count()
1

>>> db.users.insert_many(
... 	{'first_name':'Maggie','last_name':'Reynolds','email':'magginator@email.com','registered':datetime.datetime(2012,5,5)},
... 	{'first_name':'Bob','last_name':'Smith','email':'bob.smith@email.com','age':23,'registered':datetime.datetime(2010,4,12)},
... 	{'first_name':'Pat','last_name':'Smith','email':'pat.smith@email.com','age':19,'registered':datetime.datetime(2010,4,12)},
... 	{'first_name':'Werfina','last_name':'Fablesmok','email':'wgf@email.com','age':'45','registered':datetime.datetime(2012,5,6)},
... )

-----
Table.select
-----

>>> check = lambda x:'\n'.join(str(sorted(row.items())) for row in x)
>>> print check(db.users.select())
[('age', 18), ('email', 'magginator@email.com'), ('first_name', 'Maggie'), ('last_name', 'Reynolds'), ('registered', datetime.datetime(2012, 5, 5, 0, 0))]
[('age', 23), ('email', 'bob.smith@email.com'), ('first_name', 'Bob'), ('last_name', 'Smith'), ('registered', datetime.datetime(2010, 4, 12, 0, 0))]
[('age', 19), ('email', 'pat.smith@email.com'), ('first_name', 'Pat'), ('last_name', 'Smith'), ('registered', datetime.datetime(2010, 4, 12, 0, 0))]
[('age', 45), ('email', 'wgf@email.com'), ('first_name', 'Werfina'), ('last_name', 'Fablesmok'), ('registered', datetime.datetime(2012, 5, 6, 0, 0))]

>>> print check((db.users.age > 20).select())
[('age', 23), ('email', 'bob.smith@email.com'), ('first_name', 'Bob'), ('last_name', 'Smith'), ('registered', datetime.datetime(2010, 4, 12, 0, 0))]
[('age', 45), ('email', 'wgf@email.com'), ('first_name', 'Werfina'), ('last_name', 'Fablesmok'), ('registered', datetime.datetime(2012, 5, 6, 0, 0))]

>>> print check(db.users.select(db.users.first_name, db.users.last_name, orderby=db.users.last_name))
[('first_name', 'Werfina'), ('last_name', 'Fablesmok')]
[('first_name', 'Maggie'), ('last_name', 'Reynolds')]
[('first_name', 'Bob'), ('last_name', 'Smith')]
[('first_name', 'Pat'), ('last_name', 'Smith')]

>>> print check(db.users.select(db.users.first_name, db.users.last_name, orderby=[db.users.last_name,db.users.first_name.descend()]))
[('first_name', 'Werfina'), ('last_name', 'Fablesmok')]
[('first_name', 'Maggie'), ('last_name', 'Reynolds')]
[('first_name', 'Pat'), ('last_name', 'Smith')]
[('first_name', 'Bob'), ('last_name', 'Smith')]

>>> map(dict,db.users.select(db.users.last_name, distinct=True, orderby=db.users.last_name))
[{'last_name': 'Fablesmok'}, {'last_name': 'Reynolds'}, {'last_name': 'Smith'}]


=====
DB.connect
=====

>>> from silk.webdb import *
>>> db = DB.connect('sqlite', 'path/to/database.sqlite')
Traceback (most recent call last):
 ...
IOError: [Errno 2] No such file or directory: 'path/to/database.sqlite'
>>> db = DB.connect('fakename')
Traceback (most recent call last):
 ...
UnknownDriver: Unable to find database driver 'fakename'
>>> db = DB.connect('<>invalid name+/%')
Traceback (most recent call last):
 ...
UnknownDriver: Unable to find database driver '<>invalid name+/%'
>>> db = DB.connect('base') #Module exists, but has no object named 'base'
Traceback (most recent call last):
 ...
UnknownDriver: Unable to find database driver 'base'
>>> db = DB.connect('sqlite')

=====
Table
=====

>>> db.define_table('no_cols') #Valid (implicitly contains rowid column)
>>> db.define_table('table1', StrColumn('bad identifier'))
Traceback (most recent call last):
 ...
NameError: Column names can only contain letters, numbers, and underscores. Got 'bad identifier'
>>> db.define_table('table1', StrColumn('data'))
>>> db.define_table('table2', db.table1)
>>> db.table1 is db.table2
False
>>> db.table1 == db.table2
True
>>> db.table1._name
'table1'
>>> db.table2._name
'table2'
>>> db.table1.data is db.table2.data
False
>>> db.define_table('table3', StrColumn('columns'))
>>> db.define_table('table4', StrColumn('data'), primarykey=[]) #No indexing support
>>> db.define_table('table5', ReferenceColumn('badref', db.table4))
Traceback (most recent call last):
 ...
TypeError: Cannot reference non-indexed table 'table4'

>>> db.define_table('users',
... 	StrColumn('first_name'),
... 	StrColumn('last_name'),
... 	StrColumn('email'),
... 	IntColumn('age', default=18),
... 	DateTimeColumn('registered', default=datetime.datetime.now),
... 	primarykey='email',
... )

>>> db.define_table('messages',
... 	ReferenceColumn('owner', db.users),
... 	StrColumn('subject'),
... 	StrColumn('content'),
... 	DateTimeColumn('sent', default=datetime.datetime.now),
... )

-----
Table.insert
-----

>>> db.table1.insert(data='12345')
>>> db.table1.insert(nonexistant=True)
Traceback (most recent call last):
 ...
KeyError: 'No such column in table: nonexistant'
>>> db.table1.insert(data=23456)
>>> for row in db.table1.select():
...   print row
Row(data=u'12345')
Row(data=u'23456')
>>> for row in db.table2.select():
...   print row
>>> db.table3.insert(columns='1')
>>> (db.table3._columns['columns'] == '1').count()
1

>>> db.users.insert_many(
... 	{'first_name':'Maggie','last_name':'Reynolds','email':'magginator@email.com','registered':datetime.datetime(2012,5,5)},
... 	{'first_name':'Bob','last_name':'Smith','email':'bob.smith@email.com','age':23,'registered':datetime.datetime(2010,4,12)},
... 	{'first_name':'Pat','last_name':'Smith','email':'pat.smith@email.com','age':19,'registered':datetime.datetime(2010,4,12)},
... 	{'first_name':'Werfina','last_name':'Fablesmok','email':'wgf@email.com','age':'45','registered':datetime.datetime(2012,5,6)},
... )

>>> db.table4.insert(data='abc')
>>> db.table4[1]
Traceback (most recent call last):
 ...
TypeError: Table 'table4' has no primarykey
>>> (db.table4.data=='abc').select().one().primarykey
()

-----
Table.select
-----

>>> for row in db.users.select(): print row
Row(first_name=u'Maggie', last_name=u'Reynolds', email=u'magginator@email.com', age=18, registered=datetime.datetime(2012, 5, 5, 0, 0))
Row(first_name=u'Bob', last_name=u'Smith', email=u'bob.smith@email.com', age=23, registered=datetime.datetime(2010, 4, 12, 0, 0))
Row(first_name=u'Pat', last_name=u'Smith', email=u'pat.smith@email.com', age=19, registered=datetime.datetime(2010, 4, 12, 0, 0))
Row(first_name=u'Werfina', last_name=u'Fablesmok', email=u'wgf@email.com', age=45, registered=datetime.datetime(2012, 5, 6, 0, 0))

>>> for row in (db.users.age > 20).select(): print row
Row(first_name=u'Bob', last_name=u'Smith', email=u'bob.smith@email.com', age=23, registered=datetime.datetime(2010, 4, 12, 0, 0))
Row(first_name=u'Werfina', last_name=u'Fablesmok', email=u'wgf@email.com', age=45, registered=datetime.datetime(2012, 5, 6, 0, 0))

>>> for row in db.users.select(db.users.first_name, db.users.last_name, orderby=db.users.last_name): print row
Row(first_name=u'Werfina', last_name=u'Fablesmok')
Row(first_name=u'Maggie', last_name=u'Reynolds')
Row(first_name=u'Bob', last_name=u'Smith')
Row(first_name=u'Pat', last_name=u'Smith')

>>> for row in db.users.select(db.users.first_name, db.users.last_name, orderby=[db.users.last_name,reversed(db.users.first_name)]): print row
Row(first_name=u'Werfina', last_name=u'Fablesmok')
Row(first_name=u'Maggie', last_name=u'Reynolds')
Row(first_name=u'Pat', last_name=u'Smith')
Row(first_name=u'Bob', last_name=u'Smith')

>>> [vars(row) for row in db.users.select(db.users.last_name, distinct=True, orderby=db.users.last_name)]
[{'last_name': u'Fablesmok'}, {'last_name': u'Reynolds'}, {'last_name': u'Smith'}]

>>> db.users.select(db.users.age.sum()).one()[0]
105
>>> db.users.select(db.users.age.average()).one()[0]
26.25
>>> db.users.select(db.users.age.max()).one()[0]
45
>>> for row in db.users.age.between(19,30).select(): print row
Row(first_name=u'Bob', last_name=u'Smith', email=u'bob.smith@email.com', age=23, registered=datetime.datetime(2010, 4, 12, 0, 0))
Row(first_name=u'Pat', last_name=u'Smith', email=u'pat.smith@email.com', age=19, registered=datetime.datetime(2010, 4, 12, 0, 0))


=====
Record
=====

>>> record = db.users['magginator@email.com']
>>> print record
Row(first_name=u'Maggie', last_name=u'Reynolds', email=u'magginator@email.com', age=18, registered=datetime.datetime(2012, 5, 5, 0, 0))
>>> record.update(age=record.age+1) #Happy Birthday!
Row(first_name=u'Maggie', last_name=u'Reynolds', email=u'magginator@email.com', age=19, registered=datetime.datetime(2012, 5, 5, 0, 0))
>>> db.users['magginator@email.com'] #Primary key is 'email' column
Row(first_name=u'Maggie', last_name=u'Reynolds', email=u'magginator@email.com', age=19, registered=datetime.datetime(2012, 5, 5, 0, 0))
>>> record.update(nonexistant=True)
Traceback (most recent call last):
 ...
KeyError: 'No such column in table: nonexistant'
>>> record.update(**{'bad identifier':True})
Traceback (most recent call last):
 ...
NameError: Column names can only contain letters, numbers, and underscores. Got 'bad identifier'

>>> map(tuple, (db.users.last_name=='Smith').select(db.users.first_name, orderby=db.users.first_name))
[(u'Bob',), (u'Pat',)]
>>> zip(*(db.users.last_name=='Smith').select(db.users.first_name, orderby=db.users.first_name))
[(u'Bob', u'Pat')]

>>> db.users['not.in.db@email.com']
Traceback (most recent call last):
 ...
KeyError: "No Row in database matching primary key 'not.in.db@email.com'"
>>> maggie = db.users['magginator@email.com']

>>> list((maggie.email == db.messages.owner).select())
[]

>>> list(maggie.messages.select())
[]

>>> [r[0] for r in db.users.select(db.users.last_name[0])]
[u'R', u'S', u'S', u'F']
>>> [r[0] for r in db.users.select(db.users.last_name[3:5])]
[u'no', u'th', u'th', u'le']
>>> [r[0] for r in db.users.select(db.users.last_name[1:])]
[u'eynolds', u'mith', u'mith', u'ablesmok']
>>> [r[0] for r in db.users.select(db.users.last_name[:-1])]
Traceback (most recent call last):
	...
ValueError: Negative-valued slices not allowed
>>> [r[0] for r in db.users.select(db.users.age[1:])]
[9, 3, 9, 5]
>>> [r[0] for r in db.users.select(db.users.first_name+' '+db.users.last_name)]
[u'Maggie Reynolds', u'Bob Smith', u'Pat Smith', u'Werfina Fablesmok']

=====
Inter-table references
=====

>>> db.define_table('addresses',
... 	StrColumn('name', primarykey=True),
... 	StrColumn('domain', primarykey=True),
... 	BoolColumn('active', default=False),
... )
>>> db.define_table('accounts',
... 	ReferenceColumn('address', db.addresses.name+'@'+db.addresses.domain),
... 	StrColumn('owner_name'),
... )

>>> db.addresses.insert(name='webmaster', domain='example.com', active=True)
>>> db.addresses.insert(name='postmaster', domain='example.com', active=True)
>>> db.addresses.insert(name='cerealmaster', domain='example.com')
>>> wm = db.addresses['webmaster', 'example.com']
>>> wm
Row(name=u'webmaster', domain=u'example.com', active=True)

>>> db.accounts.insert(address=wm, owner_name='The Webmaster')
>>> for row in (db.accounts.owner_name=='The Webmaster').select(): print row
Row(address=u'webmaster@example.com', owner_name=u'The Webmaster')

>>> for row in (db.addresses.name+'@'+db.addresses.domain==wm.address).select(): print row
Row(address=u'webmaster@example.com', owner_name=u'The Webmaster')

>>> for row in wm.accounts.select(): print row
Row(address=u'webmaster@example.com', owner_name=u'The Webmaster')
